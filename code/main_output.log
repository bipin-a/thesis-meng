nohup: ignoring input
2023-07-17 00:02:50.778575: I tensorflow/core/platform/cpu_feature_guard.cc:182] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
2023-07-17 00:02:51.635195: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT
Reusing dataset glue (/home/grad/baasi/.cache/huggingface/datasets/glue/cola/1.0.0/dacbe3125aa31d7f70367a07a8a9e72a5a0bfeb5fc42e75c9db75b96da6053ad)
Experiment_1_2023_07_17-00_02_54
{'path': 'glue', 'name': 'cola'}
  0%|          | 0/3 [00:00<?, ?it/s]100%|██████████| 3/3 [00:00<00:00, 1107.36it/s]
Some weights of the model checkpoint at bert-base-uncased were not used when initializing BertForSequenceClassification: ['cls.seq_relationship.bias', 'cls.predictions.decoder.weight', 'cls.seq_relationship.weight', 'cls.predictions.transform.dense.weight', 'cls.predictions.transform.LayerNorm.weight', 'cls.predictions.bias', 'cls.predictions.transform.dense.bias', 'cls.predictions.transform.LayerNorm.bias']
- This IS expected if you are initializing BertForSequenceClassification from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing BertForSequenceClassification from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
Some weights of BertForSequenceClassification were not initialized from the model checkpoint at bert-base-uncased and are newly initialized: ['classifier.weight', 'classifier.bias']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
Parameter 'function'=<function DatasetPipeline.tokenize_function at 0x7f006ee2ca60> of the transform datasets.arrow_dataset.Dataset._map_single couldn't be hashed properly, a random hash was used instead. Make sure your transforms and parameters are serializable with pickle or dill for the dataset fingerprinting and caching to work. If you reuse this transform, the caching mechanism will consider it to be different from the previous calls and recompute everything. This warning is only showed once. Subsequent hashing failures won't be showed.
  0%|          | 0/9 [00:00<?, ?ba/s] 11%|█         | 1/9 [00:00<00:01,  4.50ba/s] 22%|██▏       | 2/9 [00:00<00:01,  4.94ba/s] 33%|███▎      | 3/9 [00:00<00:01,  5.16ba/s] 44%|████▍     | 4/9 [00:00<00:00,  5.25ba/s] 56%|█████▌    | 5/9 [00:00<00:00,  5.30ba/s] 67%|██████▋   | 6/9 [00:01<00:00,  5.33ba/s] 78%|███████▊  | 7/9 [00:01<00:00,  5.34ba/s] 89%|████████▉ | 8/9 [00:01<00:00,  5.35ba/s]100%|██████████| 9/9 [00:01<00:00,  6.21ba/s]100%|██████████| 9/9 [00:01<00:00,  5.53ba/s]
  0%|          | 0/2 [00:00<?, ?ba/s] 50%|█████     | 1/2 [00:00<00:00,  5.72ba/s]100%|██████████| 2/2 [00:00<00:00, 10.44ba/s]
  0%|          | 0/2 [00:00<?, ?ba/s] 50%|█████     | 1/2 [00:00<00:00,  5.74ba/s]100%|██████████| 2/2 [00:00<00:00, 10.30ba/s]
tokenized dataset: DatasetDict({
    train: Dataset({
        features: ['labels', 'input_ids', 'token_type_ids', 'attention_mask'],
        num_rows: 8551
    })
    validation: Dataset({
        features: ['labels', 'input_ids', 'token_type_ids', 'attention_mask'],
        num_rows: 1043
    })
    test: Dataset({
        features: ['labels', 'input_ids', 'token_type_ids', 'attention_mask'],
        num_rows: 1063
    })
})
Evaluating Model with model: BertForSequenceClassification(
  (bert): BertModel(
    (embeddings): BertEmbeddings(
      (word_embeddings): Embedding(30522, 768, padding_idx=0)
      (position_embeddings): Embedding(512, 768)
      (token_type_embeddings): Embedding(2, 768)
      (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
      (dropout): Dropout(p=0.1, inplace=False)
    )
    (encoder): BertEncoder(
      (layer): ModuleList(
        (0-11): 12 x BertLayer(
          (attention): BertAttention(
            (self): BertSelfAttention(
              (query): Linear(in_features=768, out_features=768, bias=True)
              (key): Linear(in_features=768, out_features=768, bias=True)
              (value): Linear(in_features=768, out_features=768, bias=True)
              (dropout): Dropout(p=0.1, inplace=False)
            )
            (output): BertSelfOutput(
              (dense): Linear(in_features=768, out_features=768, bias=True)
              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
          (intermediate): BertIntermediate(
            (dense): Linear(in_features=768, out_features=3072, bias=True)
            (intermediate_act_fn): GELUActivation()
          )
          (output): BertOutput(
            (dense): Linear(in_features=3072, out_features=768, bias=True)
            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
            (dropout): Dropout(p=0.1, inplace=False)
          )
        )
      )
    )
    (pooler): BertPooler(
      (dense): Linear(in_features=768, out_features=768, bias=True)
      (activation): Tanh()
    )
  )
  (dropout): Dropout(p=0.1, inplace=False)
  (classifier): Linear(in_features=768, out_features=2, bias=True)
) and dataset: <torch.utils.data.dataloader.DataLoader object at 0x7f019f3d9700>
######### 
device
#########
 cpu
  0%|          | 0/3207 [00:00<?, ?it/s]  0%|          | 1/3207 [00:03<3:28:30,  3.90s/it]  0%|          | 2/3207 [00:07<3:18:00,  3.71s/it]  0%|          | 3/3207 [00:10<3:09:27,  3.55s/it]  0%|          | 4/3207 [00:14<3:02:49,  3.42s/it]  0%|          | 5/3207 [00:17<2:59:25,  3.36s/it]  0%|          | 6/3207 [00:20<2:56:57,  3.32s/it]  0%|          | 7/3207 [00:23<2:54:03,  3.26s/it]  0%|          | 8/3207 [00:26<2:53:22,  3.25s/it]  0%|          | 9/3207 [00:30<2:52:08,  3.23s/it]  0%|          | 10/3207 [00:33<2:52:23,  3.24s/it]  0%|          | 11/3207 [00:36<2:53:36,  3.26s/it]  0%|          | 12/3207 [00:39<2:53:40,  3.26s/it]  0%|          | 13/3207 [00:43<2:51:10,  3.22s/it]  0%|          | 14/3207 [00:46<2:49:36,  3.19s/it]  0%|          | 15/3207 [00:49<2:49:09,  3.18s/it]  0%|          | 16/3207 [00:52<2:49:39,  3.19s/it]  1%|          | 17/3207 [00:55<2:50:22,  3.20s/it]  1%|          | 18/3207 [00:59<2:51:25,  3.23s/it]  1%|          | 19/3207 [01:02<2:50:44,  3.21s/it]  1%|          | 20/3207 [01:05<2:51:50,  3.24s/it]  1%|          | 21/3207 [01:08<2:52:37,  3.25s/it]  1%|          | 22/3207 [01:12<2:53:02,  3.26s/it]  1%|          | 23/3207 [01:15<2:52:28,  3.25s/it]  1%|          | 24/3207 [01:18<2:52:20,  3.25s/it]  1%|          | 25/3207 [01:21<2:52:15,  3.25s/it]  1%|          | 26/3207 [01:25<2:52:39,  3.26s/it]  1%|          | 27/3207 [01:28<2:53:18,  3.27s/it]  1%|          | 28/3207 [01:31<2:53:31,  3.28s/it]  1%|          | 29/3207 [01:35<2:54:25,  3.29s/it]  1%|          | 30/3207 [01:38<2:53:10,  3.27s/it]  1%|          | 31/3207 [01:41<2:54:32,  3.30s/it]  1%|          | 32/3207 [01:44<2:54:36,  3.30s/it]  1%|          | 33/3207 [01:48<2:55:02,  3.31s/it]  1%|          | 34/3207 [01:51<2:58:09,  3.37s/it]  1%|          | 35/3207 [01:55<2:57:36,  3.36s/it]  1%|          | 36/3207 [01:58<2:54:39,  3.30s/it]  1%|          | 37/3207 [02:01<2:51:44,  3.25s/it]  1%|          | 38/3207 [02:04<2:51:34,  3.25s/it]  1%|          | 39/3207 [02:07<2:50:48,  3.24s/it]  1%|          | 40/3207 [02:11<2:51:12,  3.24s/it]  1%|▏         | 41/3207 [02:14<2:52:02,  3.26s/it]  1%|▏         | 42/3207 [02:17<2:52:49,  3.28s/it]  1%|▏         | 43/3207 [02:20<2:52:15,  3.27s/it]  1%|▏         | 44/3207 [02:24<2:52:35,  3.27s/it]  1%|▏         | 45/3207 [02:27<2:52:17,  3.27s/it]  1%|▏         | 46/3207 [02:30<2:52:23,  3.27s/it]  1%|▏         | 47/3207 [02:33<2:50:54,  3.25s/it]  1%|▏         | 48/3207 [02:37<2:50:25,  3.24s/it]  2%|▏         | 49/3207 [02:40<2:49:25,  3.22s/it]  2%|▏         | 50/3207 [02:43<2:49:46,  3.23s/it]  2%|▏         | 51/3207 [02:46<2:51:26,  3.26s/it]  2%|▏         | 52/3207 [02:50<2:51:24,  3.26s/it]  2%|▏         | 53/3207 [02:53<2:50:18,  3.24s/it]  2%|▏         | 54/3207 [02:56<2:49:17,  3.22s/it]  2%|▏         | 55/3207 [02:59<2:51:42,  3.27s/it]  2%|▏         | 56/3207 [03:03<2:50:49,  3.25s/it]